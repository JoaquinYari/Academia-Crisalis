package persistence.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.LinkedList;
import java.util.List;

import model.nullObjets.NullProduct;
import model.nullObjets.NullService;
import model.order.Product;
import model.order.Service;
import persistence.ServiceDao;
import persistence.commons.ConnectionProvider;
import persistence.commons.MissingDataException;

public class ServiceDaoImpl implements ServiceDao{
	

	@Override
	public Integer insert(Service service) {

		try {
			String sql = "INSERT INTO Services (name, baseCost, iva, iibb, special)" + "VALUES (?, ?, ?, ?, ?)";
			Connection conn = ConnectionProvider.getConnection();

			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, service.getName());
			statement.setDouble(2, service.getBaseCost());
			statement.setDouble(3, service.getIva());
			statement.setDouble(4, service.getIibb());
			statement.setBoolean(5, service.getSpecial());

			int rows = statement.executeUpdate();

			return rows;

		} catch (Exception e) {
			throw new MissingDataException(e);
		}

	}

	@Override
	public Integer update(Service service) {
		try {
			String sql = "UPDATE Services (name, baseCost, iva, iibb, special)" + "VALUES (?, ?, ?, ?, ?) WHERE id = ?";
			Connection conn = ConnectionProvider.getConnection();

			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, service.getName());
			statement.setDouble(2, service.getBaseCost());
			statement.setDouble(3, service.getIva());
			statement.setDouble(4, service.getIibb());
			statement.setBoolean(5, service.getSpecial());
			statement.setDouble(6, service.getId());

			int rows = statement.executeUpdate();

			return rows;

		} catch (Exception e) {
			throw new MissingDataException(e);
		}
	}

	@Override
	public Integer delete(Service service) {
		try {
			String sql = "DELETE FROM Services WHERE id = ?";
			Connection conn = ConnectionProvider.getConnection();

			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setInt(1, service.getId());

			int rows = statement.executeUpdate();

			return rows;

		} catch (Exception e) {
			throw new MissingDataException(e);
		}
	}

	@Override
	public Service findById(Integer id) {
		try {
			String sql = "SELECT * FROM Services WHERE id = ?";
			Connection conn = ConnectionProvider.getConnection();

			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setInt(1, id);

			ResultSet result = statement.executeQuery();

			Service service = NullService.build();

			if (result.next()) {
				service = toProduct(result);
			}

			return service;

		} catch (Exception e) {
			throw new MissingDataException(e);
		}
	}

	public Product findByName(String name) {
		try {
			String sql = "SELECT * FROM Products WHERE name = ?";
			Connection conn = ConnectionProvider.getConnection();

			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, name);

			ResultSet result = statement.executeQuery();

			Product product = NullProduct.build();

			if (result.next()) {
				product = toProduct(result);
			}

			return product;

		} catch (Exception e) {
			throw new MissingDataException(e);
		}
	}

	@Override
	public List<Product> findAll() {
		try {
			String sql = "SELECT * FROM Products";
			Connection conn = ConnectionProvider.getConnection();

			PreparedStatement statement = conn.prepareStatement(sql);

			ResultSet result = statement.executeQuery();

			List<Product> products = new LinkedList<Product>();

			while (result.next()) {
				products.add(toProduct(result));
			}

			return products;

		} catch (Exception e) {
			throw new MissingDataException(e);
		}
	}

	private Product toProduct(ResultSet result) {
		try {
			return new Product(result.getInt(1), result.getString(2), result.getDouble(3), result.getDouble(4),
					result.getDouble(5));
		} catch (Exception e) {
			throw new MissingDataException(e);
		}
	}


}
