package model.order;

import java.time.LocalDateTime;
import java.util.Hashtable;

import model.customer.Customer;

public class Order {

	private Integer orderID;
	private Hashtable<Item, Integer> items;
	private Double orderCost;
	private LocalDateTime fechaPedido;
	private Customer cliente;
	private Double descuento;
	private Double costoItems;
	private Boolean activo;

	private Double BENEFICIO = 0.1;
	private Double MAXDESCUENTO = 2500.0;

	public Order(Integer numeroPedido, Customer cliente) {
		this.orderID = numeroPedido;
		this.cliente = cliente;
		costoItems = 0.0;
		descuento = 0.0;
		items = new Hashtable<Item, Integer>();
		activo = true;
	}

	public void agregarItem(Item item, Integer cantidad) {
		items.put(item, cantidad);
	}

	public Double calcularCostoItems() {
		for (Item item : items.keySet()) {
			costoItems += item.getFinalCost() * items.get(item);
		}
		return costoItems;
	}

	public Boolean correspondeDescuento() {
		for (Item item : items.keySet()) {
			if (item instanceof Service)
				return true;
		}
		for (Order pedido : cliente.pedidos) {
			if (pedido.activo) {
				for (Item item : items.keySet()) {
					if (item instanceof Service)
						return true;
				}
			}
		}
		return false;
	}

	public Double calcularDescuento() {
		for (Item item : items.keySet()) {
			if (item instanceof Product) {
				descuento += item.getFinalCost() * BENEFICIO * items.get(item);
			}
		}
		if (descuento > MAXDESCUENTO) {
			return MAXDESCUENTO;
		} else {
			return descuento;
		}
	}

	public void cerrarPedido() {
		costoItems = calcularCostoItems();
		if (correspondeDescuento()) {
			descuento = calcularDescuento();
		}
		orderCost = costoItems - descuento;
		setFechaPedido();
		cliente.pedidos.add(this);
	}

	public void cancelarPedido() {
		vaciarPedido();
		orderCost = 0.0;
		activo = false;
		cliente.pedidos.remove(this);
	}

	private void vaciarPedido() {
		items = new Hashtable<Item, Integer>();
	}

	public Integer getNumeroPedido() {
		return orderID;
	}

	public Double getCostoPedido() {
		return orderCost;
	}

	public LocalDateTime getFechaPedido() {
		return fechaPedido;
	}

	public Double getDescuento() {
		return descuento;
	}

	private void setFechaPedido() {
		this.fechaPedido = LocalDateTime.now();
	}

	public Hashtable<Item, Integer> getItems() {
		return items;
	}

	@Override
	public String toString() {
		return "Pedido [numeroPedido=" + orderID + ", items=" + items + ", costoPedido=" + orderCost
				+ ", fechaPedido=" + fechaPedido + ", cliente=" + cliente + ", descuento=" + descuento + ", activo="
				+ activo + "]";
	}
}
